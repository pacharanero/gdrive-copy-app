{"version":3,"sources":["components/Footer.js","components/MenuBar.js","App.js","serviceWorker.js","index.js"],"names":["Footer","Menu","secondary","pointing","icon","Item","href","Component","MenuBar","state","activeItem","handleItemClick","e","name","setState","as","Link","to","active","this","onClick","App","props","copy_url","sheet_url","folder_url","sheet_url_error","folder_url_error","handleChange","bind","event","value","target","copyUrl","googleDocsBaseUrl","className","Header","Container","Segment","Form","Field","required","Input","type","placeholder","onChange","Message","color","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qYAGqBA,E,uKAEb,OACI,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAQ,EAACC,KAAK,WAC1B,kBAACH,EAAA,EAAKI,KAAN,CAAWC,KAAK,6BAAhB,0E,GAJoBC,a,QCCfC,E,4MACjBC,MAAQ,CACJC,WAAY,Q,EAGhBC,gBAAkB,SAACC,EAAD,OAAMC,EAAN,EAAMA,KAAN,OAAiB,EAAKC,SAAS,CAAEJ,WAAYG,K,uDAI3D,OACI,kBAACZ,EAAA,EAAD,CAAME,UAAQ,EAACD,WAAS,GAChB,kBAACD,EAAA,EAAKI,KAAN,CACIU,GAAIC,IAAMC,GAAG,IACbJ,KAAK,OACLK,OAAkC,SAA1BC,KAAKV,MAAMC,WACnBU,QAASD,KAAKR,uB,GAfDJ,aCqFtBc,E,kDA/Eb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDb,MAAQ,CACXc,SAAU,WACVC,UAAW,+CACXC,WAAY,oCACZC,gBAAiB,GACjBC,iBAAkB,IAEpB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBATH,E,yDAYNC,GAAO,IAAD,EACXC,EAAQD,EAAME,OAAOD,MAErBE,EADoB,0CAEtBd,KAAKV,MAAMe,UACX,YACAL,KAAKV,MAAMe,UAHCU,+DAOZf,KAAKV,MAAMgB,WACfN,KAAKL,UAAL,mBACGgB,EAAME,OAAOnB,KAAOkB,GADvB,yBAEYE,GAFZ,M,+BAOA,OACE,yBAAKE,UAAU,OACb,6BACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MAEA,kBAACC,EAAA,EAAD,CAAQrB,GAAG,MAAX,mCAIA,kBAACsB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,MAAN,CAAYC,UAAQ,GAClB,kBAACC,EAAA,EAAD,CACEC,KAAK,OACL9B,KAAK,YACLkB,MAASZ,KAAKV,MAAMe,UACpBoB,YAAY,YACZC,SAAU1B,KAAKS,eAEjB,6BAAMT,KAAKV,MAAMiB,kBAEnB,kBAACa,EAAA,EAAKC,MAAN,CAAYC,UAAQ,GAClB,kBAACC,EAAA,EAAD,CACEC,KAAK,OACL9B,KAAK,aACLkB,MAAOZ,KAAKV,MAAMgB,WAClBmB,YAAY,aACZC,SAAU1B,KAAKS,eAEjB,4BAAKT,KAAKV,MAAMkB,oBAGlB,uBAAGrB,KAAMa,KAAKV,MAAMc,SAAUS,OAAO,UAAUb,KAAKV,MAAMc,WAG9D,kBAACuB,EAAA,EAAD,CAASC,MAAM,OAAf,uFAKJ,kBAAC,EAAD,Y,GAzEQxC,aCGEyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAEL,kBAAC,EAAD,MAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0e52f0f1.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Menu, Icon, Image } from 'semantic-ui-react'\n\nexport default class Footer extends Component {\n    render() {\n        return (\n            <Menu secondary pointing icon='labeled'>\n                <Menu.Item href='https://bawmedical.co.uk/'>\n                    Â© Copyright Marcus Baw 2020 - built with React and Semantic UI\n                </Menu.Item>\n            </Menu>\n        );\n    }\n}","import React, { Component } from \"react\";\nimport { Menu } from 'semantic-ui-react';\nimport { Link} from 'react-router-dom'\n\nexport default class MenuBar extends Component {\n    state = {\n        activeItem: 'home'\n    }\n\n    handleItemClick = (e, { name }) => this.setState({ activeItem: name })\n\n    render(){\n        // const { activeItem } = this.state\n        return (\n            <Menu pointing secondary>\n                    <Menu.Item\n                        as={Link} to='/'\n                        name='home'\n                        active={this.state.activeItem === 'home'}\n                        onClick={this.handleItemClick}\n                    />\n            </Menu>\n        );\n    }\n}","import React, { Component } from 'react';\nimport './App.css';\nimport 'semantic-ui-css/semantic.min.css'\nimport { Message, Container, Segment, Form, Input, Select, Grid, Button, Header, Label } from 'semantic-ui-react'\nimport Footer from './components/Footer'\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport MenuBar from './components/MenuBar';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      copy_url: 'COPY URL',\n      sheet_url: '1siAJsT8BwuRSwZ6wETVIFBqAqZWRRJwf8MpISqQv88c',\n      folder_url: '1SatbFI2-szpk8y-93AGNxg9-CZJeKQuy',\n      sheet_url_error: '',\n      folder_url_error: '',\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event){\n    const value = event.target.value\n    const googleDocsBaseUrl = \"https://docs.google.com/spreadsheets/d/\"\n    const copyUrl = googleDocsBaseUrl\n      + this.state.sheet_url\n      + \"/copy?id=\"\n      + this.state.sheet_url\n      + \"&copyCollaborators=false\"\n      + \"&copyComments=false\"\n      + \"&copyDestination=\"\n      + this.state.folder_url\n    this.setState({\n      [event.target.name]: value,\n      copy_url: copyUrl\n    })   \n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <div>\n          <Router>\n            <MenuBar/>\n\n            <Header as='h1'>\n              Google Sheet Copy To Folder App\n            </Header>\n\n            <Container>\n              <Segment>\n                <Form>\n                  <Form.Field required>\n                    <Input\n                      type=\"text\" \n                      name=\"sheet_url\"\n                      value = {this.state.sheet_url}\n                      placeholder=\"Sheet URL\"\n                      onChange={this.handleChange}\n                    /> \n                    <div>{this.state.sheet_url_error}</div>\n                  </Form.Field>\n                  <Form.Field required>\n                    <Input \n                      type=\"text\" \n                      name=\"folder_url\"\n                      value={this.state.folder_url}\n                      placeholder=\"Folder URL\"\n                      onChange={this.handleChange}\n                    /> \n                    <h5>{this.state.folder_url_error}</h5>\n                  </Form.Field>\n                </Form>\n                  <a href={this.state.copy_url} target=\"_blank\">{this.state.copy_url}</a>\n              </Segment>\n\n              <Message color='red'>\n                Provided as a free service because I can't believe it doesn't exist anywhere else\n              </Message>\n            </Container>\n          </Router> \n          <Footer/>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}